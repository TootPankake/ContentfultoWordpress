import requests
import contentful
from openai import OpenAI
from config import SPACE_ID, ACCESS_TOKEN, MANAGEMENT_TOKEN, OPENAI_API_TOKEN

# Set up your API keys
contentful_space_id = SPACE_ID
contentful_access_token = ACCESS_TOKEN
contentful_management_token = MANAGEMENT_TOKEN
openai_api_key = OPENAI_API_TOKEN

try:
    client = contentful.Client(SPACE_ID, ACCESS_TOKEN,  
                               environment='development',
                               max_include_resolution_depth=1)
    print("Successfully connected to Contentful client.")
except contentful.errors.NotFoundError as e:
    print(f"Error: {e}")

clientAI = OpenAI(api_key=OPENAI_API_TOKEN)

# Fetch the most recent article from Contentful
temperature = 0.5
entries = []
articles = client.entries({
    'content_type': "article",
    'order': '-sys.createdAt',  # Order by creation date descending
    'limit': 20,  # Fetch only the most recent entry
})
entries.extend(articles)

def shorten_title(title, barrier): 
    title = title.replace(":", "")     
    prompt = f"""Shorten the following title: \"{title}\" using its corresponding barrier as its theme: \"{barrier}\".
Updated title must be 50 to 60 characters optimized for SEO, no colon allowed, only output the updated title, nothing else.\n""" 
    if title == "<title>" and barrier == "<barrier>":
        with open("PromptTitleTesting.md", 'a') as file:
            file.write("\nPrompt: (temperature - " + str(temperature) + ")\n" + prompt + "\nResults: \n")
        print("Prompt:\n" + prompt + "\nResults: ")
        return
    response = clientAI.chat.completions.create(
        model='gpt-4o-mini',
        temperature=temperature,
        messages=[
            {"role": "system", "content": "Assistant, providing assistance with text processing and link insertion as requested."},
            {"role": "user", "content": prompt}
        ]
    )
    shortened_title = response.choices[0].message.content
    return shortened_title

shorten_title("<title>","<barrier>") # show what the prompt is for comparison
for entry in entries:
    title = entry.fields().get('title')
    barriers = entry.fields().get('barriers', [])
    barriers_list = [barrier.fields().get('title') for barrier in barriers]
    barrier = barriers_list[0] if barriers_list else ''
    
    if title:
        shortened_title = shorten_title(title, barrier)
        entry_id = entry.sys['id']
        print(f"""{title} 
{shortened_title}\n""")
        with open("PromptTitleTesting.md", 'a') as file:
            file.write(f"""{title} 
{shortened_title}
\n""")
            
         # Fetch the full entry details to avoid wiping other fields
        entry_details_url = f"https://api.contentful.com/spaces/{contentful_space_id}/environments/development/entries/{entry_id}"
        entry_details_headers = {
            'Authorization': f'Bearer {contentful_management_token}',
        }

        entry_details_response = requests.get(entry_details_url, headers=entry_details_headers)
        entry_details = entry_details_response.json()

        version = entry_details['sys']['version']

        # Update only the slug field, keeping other fields unchanged
        entry_details['fields']['title']['en-US'] = shortened_title

        # Send the full entry data with only the title modified
        update_url = f"https://api.contentful.com/spaces/{contentful_space_id}/environments/development/entries/{entry_id}"
        update_headers = {
            'Authorization': f'Bearer {contentful_management_token}',
            'Content-Type': 'application/vnd.contentful.management.v1+json',
            'X-Contentful-Version': str(version)
        }

        '''update_response = requests.put(update_url, headers=update_headers, json=entry_details)
        if update_response.status_code == 200:
            print(f"Successfully updated title for entry ID {entry_id}")
        else:
            print(f"Failed to update title for entry ID {entry_id}: {update_response.status_code}, {update_response.text}")'''
    else:
        print("Title not found for the entry.")